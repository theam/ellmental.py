"use strict";(self.webpackChunkellmental=self.webpackChunkellmental||[]).push([[357],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(n),h=r,m=u["".concat(s,".").concat(h)]||u[h]||d[h]||o;return n?a.createElement(m,i(i({ref:t},p),{},{components:n})):a.createElement(m,i({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=h;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:r,i[1]=l;for(var c=2;c<o;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},6656:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var a=n(7462),r=(n(7294),n(3905));const o={slug:"/quickstart",title:"Quickstart",sidebar_label:"Quickstart"},i="Quickstart",l={unversionedId:"quickstart",id:"quickstart",title:"Quickstart",description:"In this guide, you'll have your very own instance of a semantic search service up and running on your computer,",source:"@site/docs/02_quickstart.md",sourceDirName:".",slug:"/quickstart",permalink:"/quickstart",draft:!1,tags:[],version:"current",lastUpdatedBy:"lopjim",lastUpdatedAt:1689887368,formattedLastUpdatedAt:"Jul 20, 2023",sidebarPosition:2,frontMatter:{slug:"/quickstart",title:"Quickstart",sidebar_label:"Quickstart"},sidebar:"docs",previous:{title:"Introduction",permalink:"/"},next:{title:"Semantic Search",permalink:"/semantic-search"}},s={},c=[{value:"Learn endpoint",id:"learn-endpoint",level:2},{value:"Search endpoint",id:"search-endpoint",level:2}],p={toc:c},u="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"quickstart"},"Quickstart"),(0,r.kt)("p",null,"In this guide, you'll have your very own instance of a semantic search service up and running on your computer,\npowered by OpenAI embeddings and the practicality of a local database. The whole process takes less than 5 minutes! \ud83c\udf08"),(0,r.kt)("p",null,"To begin working locally with ",(0,r.kt)("strong",{parentName:"p"},"eLLMental"),", you'll need to first run the ",(0,r.kt)("inlineCode",{parentName:"p"},"quickstart.sh")," script, which underneath calls\na local Docker instance. Said that here's a summary of the steps you'll need to follow:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Make sure ",(0,r.kt)("a",{parentName:"li",href:"https://www.docker.com/"},"Docker")," is installed on your system."),(0,r.kt)("li",{parentName:"ol"},"Clone the repository: ",(0,r.kt)("inlineCode",{parentName:"li"},"git clone https://github.com/theam/ellmental.py")),(0,r.kt)("li",{parentName:"ol"},"Navigate to the semantic search directory: ",(0,r.kt)("inlineCode",{parentName:"li"},"cd apps/semantic_search"))),(0,r.kt)("p",null,"In this directory, you'll find the ",(0,r.kt)("inlineCode",{parentName:"p"},"quickstart.sh")," script that will help you set up a semantic search service in no time, by\njust running: ",(0,r.kt)("inlineCode",{parentName:"p"},"./quickstart.sh")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"This script will ask you for your OPENAI API key, and then it will start the service using\ndocker.")),(0,r.kt)("p",null,"Once the docker container is running, you will get a semantic search service running exposing two endpoints:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"The documentation endpoint, with information about how to use the API: ",(0,r.kt)("inlineCode",{parentName:"li"},"http://localhost:8000/docs")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("a",{parentName:"li",href:"#learn-endpoint"},"The learn endpoint"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"http://localhost:8000/learn")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("a",{parentName:"li",href:"#search-endpoint"},"The search endpoint"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"http://localhost:8000/search"))),(0,r.kt)("h2",{id:"learn-endpoint"},"Learn endpoint"),(0,r.kt)("p",null,"With the ",(0,r.kt)("inlineCode",{parentName:"p"},"learn")," endpoint, you can make your service learn from a set of documents' content (or any text you'd like!). You\njust need to provide the endpoint with ",(0,r.kt)("inlineCode",{parentName:"p"},"content"),", so it can then be turned into embeddings and stored in the local database."),(0,r.kt)("p",null,"You can try the service by sending a POST request to ",(0,r.kt)("inlineCode",{parentName:"p"},"http://localhost:8000/learn")," with the following body:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "items": [\n        {\n            "content": "Grain in dogs\' food is not good for them.",\n            "metadata": {"key1": "value1", "key2": "value2"},\n            "cluster_id": "your_file_id"\n        },\n        ...\n    ]\n}\n')),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"CURL command:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'  curl --location \'http://127.0.0.1:8000/learn\' \\\n  --header \'Content-Type: application/json\' \\\n  --data \'{\n    "items": [\n        {\n            "content": "Grain in dogs\'\\\'\' food is not good for them.",\n            "metadata": {"key1": "value1", "key2": "value2"},\n            "cluster_id": "your_file_id"\n        }\n    ]\n  }\'\n')),(0,r.kt)("h2",{id:"search-endpoint"},"Search endpoint"),(0,r.kt)("p",null,"With the search endpoint, you will get answers to your questions, based on what you have ingested with\nthe ",(0,r.kt)("inlineCode",{parentName:"p"},"learn")," endpoint. You just need to provide the endpoint with a ",(0,r.kt)("inlineCode",{parentName:"p"},"query"),", and the service will return the most\nrelevant information based on the embeddings stored in the local database."),(0,r.kt)("p",null,"You can try this endpoint by sending a POST request to ",(0,r.kt)("inlineCode",{parentName:"p"},"http://localhost:8000/search")," with the following body:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "query": "How does grain food affect dogs?",\n  "cluster_ids": ["your_file_id"]\n}\n')),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"CURL command:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'  curl --location \'http://127.0.0.1:8000/search\' \\\n  --header \'Content-Type: application/json\' \\\n  --data \'{\n  "query": "How does grain food affect dogs?",\n  "cluster_ids": ["your_file_id"]\n  }\'\n')))}d.isMDXComponent=!0}}]);